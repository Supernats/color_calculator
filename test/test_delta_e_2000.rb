# frozen_string_literal: true

require 'helper'
require 'securerandom'

class TestDeltaE2000 < Minitest::Test
  DATA = [
    [[0, 0, 0], [0, 0, 0], 0],
    [[100, 100, 100], [100, 100, 100], 0],
    [[100, 100, 100], [0, 0, 0], 105.563373],
    [[0, 0, 0], [100, 100, 100], 105.563373],
    [[100, 0, 0], [0, 0, 0], 100],
    [[0, 100, 0], [0, 0, 0], 30.787590],
    [[0, 0, 100], [0, 0, 0], 30.769231],
    [[0, -100, 0], [0, 0, 0], 30.787590],
    [[0, 0, -100], [0, 0, 0], 30.769231],
    [[0, 0, 0], [100, 0, 0], 100],
    [[0, 0, 0], [0, 100, 0], 30.787590],
    [[0, 0, 0], [0, 0, 100], 30.769231],
    [[0, 0, 0], [0, -100, 0], 30.787590],
    [[0, 0, 0], [0, 0, -100], 30.769231],
    [[100, 0, 0], [0, 0, 100], 104.626696],
    [[100, 100, 0], [0, 100, 100], 105.910363],
    [[100, 0, 100], [0, 100, 0], 122.134396],
    [[41.5206, -4.5733, -33.4939], [0, 0, 0], 34.798803],
    [[0, 0, 0], [41.5206, -4.5733, -33.4939], 34.798803],
    [[41.5206, -4.5733, -33.4939], [100, 0, 0], 48.805302],
    [[41.5206, -4.5733, -33.4939], [100, 100, 0], 68.059559],
    [[41.5206, -4.5733, -33.4939], [100, 0, 100], 74.609728],
    [[41.5206, -4.5733, -33.4939], [100, 100, 100], 68.764244],
    [[41.5206, -4.5733, -33.4939], [0, 100, 0], 58.831138],
    [[41.5206, -4.5733, -33.4939], [0, 100, 100], 59.644954],
    [[41.5206, -4.5733, -33.4939], [0, 0, 100], 66.299402],
    [[41.5206, -4.5733, -33.4939], [81.0622, -60.9416, 48.7707], 59.736248],
    [[81.0622, -60.9416, 48.7707], [41.5206, -4.5733, -33.4939], 59.736248],
    [[50.0000, 2.6772, -79.7751], [50.0000, 0.0000, -82.7485], 2.0425],
    [[50.0000, 3.1571, -77.2803], [50.0000, 0.0000, -82.7485], 2.8615],
    [[50.0000, 2.8361, -74.0200], [50.0000, 0.0000, -82.7485], 3.4412],
    [[50.0000, -1.3802, -84.2814], [50.0000, 0.0000, -82.7485], 1.0000],
    [[50.0000, -1.1848, -84.8006], [50.0000, 0.0000, -82.7485], 1.0000],
    [[50.0000, -0.9009, -85.5211], [50.0000, 0.0000, -82.7485], 1.0000]
  ]

  DATA.each do |a, b, difference|
    name = ["test", SecureRandom.uuid.delete("-")].join("_")

    define_method(name) do
      sample = ColorCalculator::Clump::Lab.new(*b)
      reference = ColorCalculator::Clump::Lab.new(*a)
      result = ColorCalculator::Calculation::DeltaE2000.call(sample, reference)

      assert_in_delta(
        difference,
        result,
        0.001,
        <<~ERROR
          Sample: #{sample}
          Reference: #{reference}
          Expected: #{difference}
          Actual: #{result}
        ERROR
      )
    end
  end
end
